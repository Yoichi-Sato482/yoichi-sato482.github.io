{"meta":{"title":"Moeri落落格","subtitle":null,"description":"我就喜歡這樣子寫落落格，這是咱無聊和發呆的地方","author":"Yoichi","url":"https://blog.bakalu.site","root":"/"},"pages":[{"title":"關於這隻貓貓","date":"2023-01-12T22:30:07.000Z","updated":"2023-12-28T03:54:59.049Z","comments":true,"path":"about/index.html","permalink":"https://blog.bakalu.site/about/index.html","excerpt":"","text":"有什麼想要一起討論的可以在下面講哦~（不可以吵架） 關於我Timeline還沒想好的內容...笨貓，笨蛋，豬咪… 總是喜歡折騰一些虛無的東西… 有一點點的技術但是超級爛… 是男娘（ 2023-01-12 [0.1] Blog創建，正式部署 2023-11-01 [0.1 -&gt; 0.2] 網站域名到期更新 2023-12-15 [0.2 -&gt; 0.2.1] 修改了友鏈頁面的部分內容，刪除（更新）了部分失效鏈接將時間軸頁面合併到關於頁面中 正在施工…"},{"title":"所有分类","date":"2023-03-31T12:27:22.609Z","updated":"2023-03-31T12:27:22.609Z","comments":true,"path":"categories/index.html","permalink":"https://blog.bakalu.site/categories/index.html","excerpt":"","text":""},{"title":"","date":"2023-11-17T10:27:11.253Z","updated":"2023-11-17T10:27:11.253Z","comments":true,"path":"css/custom.css","permalink":"https://blog.bakalu.site/css/custom.css","excerpt":"","text":"/* 暗黑模式动画 */ /* 象徵性更新 */ #RightDownBtn { position: fixed; left: 1.875rem; bottom: 1.875rem; padding: 0.3125rem 0.625rem; background: #fff; border-radius: 0.1875rem; transition: 0.3s ease all; z-index: 1; align-items: flex-end; flex-direction: column; display: -moz-flex; display: flex; float: right; } #RightDownBtn>a, #RightDownBtn>label { width: 1.5em; height: 1.5em; margin: 0.3125rem 0; transition: .2s cubic-bezier(.25, .46, .45, .94); } /* font color */ .DarkMode #page, .DarkMode #colophon, .DarkMode #vcomments .vbtn, .DarkMode .art-content #archives .al_mon_list .al_mon, .DarkMode .art-content #archives .al_mon_list span, .DarkMode body, .DarkMode .art-content #archives .al_mon_list .al_mon, .DarkMode .art-content #archives .al_mon_list span, .DarkMode button, .DarkMode .art .art-content #archives a, .DarkMode textarea, .DarkMode strong, .DarkMode a, .DarkMode p, .DarkMode li, .DarkMode .label { color: rgba(255, 255, 255, .6); } .DarkMode #page, .DarkMode body, .DarkMode #colophon, .DarkMode #main-container, .DarkMode #page .yya, .DarkMode #content, .DarkMode #contentss, .DarkMode #footer { background-color: #292a2d; } .DarkMode strong, .DarkMode img { filter: brightness(.7); } /* sun and noon */ .Cuteen_DarkSky, .Cuteen_DarkSky:before { content: \"\"; position: fixed; left: 0; right: 0; top: 0; bottom: 0; z-index: 88888888 } .Cuteen_DarkSky { background: linear-gradient(#feb8b0, #fef9db) } .Cuteen_DarkSky:before { transition: 2s ease all; opacity: 0; background: linear-gradient(#4c3f6d, #6c62bb, #93b1ed) } .DarkMode .Cuteen_DarkSky:before { opacity: 1 } .Cuteen_DarkPlanet { z-index: 99999999; position: fixed; left: -50%; top: -50%; width: 200%; height: 200%; -webkit-animation: CuteenPlanetMove 2s cubic-bezier(.7, 0, 0, 1); animation: CuteenPlanetMove 2s cubic-bezier(.7, 0, 0, 1); transform-origin: center bottom } @-webkit-keyframes CuteenPlanetMove { 0% { transform: rotate(0) } to { transform: rotate(360deg) } } @keyframes CuteenPlanetMove { 0% { transform: rotate(0) } to { transform: rotate(360deg) } } .Cuteen_DarkPlanet:after { position: absolute; left: 35%; top: 40%; width: 9.375rem; height: 9.375rem; border-radius: 50%; content: \"\"; background: linear-gradient(#fefefe, #fffbe8) }"},{"title":"喵言喵語-此段文字由貓貓隨機生成","date":"2023-01-18T22:32:12.000Z","updated":"2023-01-18T15:29:49.810Z","comments":true,"path":"essay/index.html","permalink":"https://blog.bakalu.site/essay/index.html","excerpt":"","text":""},{"title":"喵喵的可爱喵喵们","date":"2023-03-16T13:52:57.000Z","updated":"2023-12-16T04:00:51.692Z","comments":true,"path":"friends/index.html","permalink":"https://blog.bakalu.site/friends/index.html","excerpt":"喵哦~需要交换友链可以在下面找到格式喵） 友链的各种格式在这里 yml格式MARKDOWN格式1234- name: Moeri落落格 link: https://blog.bakalu.cyou/ avatar: https://i.imgur.com/XDUwpAf.png descr: 看一只自稱貓娘的日常123名稱：Moeri落落格鏈接：https://blog.bakalu.cyou/描述：看一只自稱貓娘的日常 喵星链接通讯中...","text":"喵哦~需要交换友链可以在下面找到格式喵） 友链的各种格式在这里 yml格式MARKDOWN格式1234- name: Moeri落落格 link: https://blog.bakalu.cyou/ avatar: https://i.imgur.com/XDUwpAf.png descr: 看一只自稱貓娘的日常123名稱：Moeri落落格鏈接：https://blog.bakalu.cyou/描述：看一只自稱貓娘的日常 喵星链接通讯中... 如果需要交换可以在下面留言"},{"title":"","date":"2023-02-13T13:00:46.713Z","updated":"2023-02-13T13:00:46.713Z","comments":true,"path":"js/custom.js","permalink":"https://blog.bakalu.site/js/custom.js","excerpt":"","text":"/* ==================================== * 暗黑模式动画 ====================================*/ function BackTOP() { $(\"#btn\").hide(); $(function () { $(window).scroll(function () { if ($(window).scrollTop() > 50) { $(\"#btn\").fadeIn(200); } else { $(\"#btn\").fadeOut(200); } }); $(\"#btn\").click(function () { $('body,html').animate({ scrollTop: 0 }, 500); return false; }); }); $(function () { $(\"#say\").click(function () { $('body,html').animate({ scrollTop: $('html, body').get(0).scrollHeight }, 500); return false; }); }) } $('#readmode').click(function () { $('body').toggleClass('read-mode') }) function SiderMenu() { $('#main-container').toggleClass('open'); $('.iconflat').css('width', '50px').css('height', '50px'); $('.openNav').css('height', '50px'); $('#main-container,#mo-nav,.openNav').toggleClass('open') } function switchNightMode() { $('').appendTo($(\"body\")), setTimeout( function () { (volantis.dark.mode == \"dark\") ? ($(\"html\").addClass(\"DarkMode\"), $('#modeicon').attr(\"xlink:href\", \"#icon-sun\")) : ($(\"html\").removeClass(\"DarkMode\"), $('#modeicon').attr(\"xlink:href\", \"#icon-_moon\")), setTimeout(function () { $(\".Cuteen_DarkSky\").fadeOut(1e3, function () { $(this).remove() }) }, 2e3) }), 50 } function checkNightMode() { if ($(\"html\").hasClass(\"n-f\")) { $(\"html\").removeClass(\"day\"); $(\"html\").addClass(\"DarkMode\"); $('#modeicon').attr(\"xlink:href\", \"#icon-sun\") return; } if ($(\"html\").hasClass(\"d-f\")) { $(\"html\").removeClass(\"DarkMode\"); $(\"html\").addClass(\"day\"); $('#modeicon').attr(\"xlink:href\", \"#icon-_moon\") return; } if (volantis.dark.mode == \"dark\") { $(\"html\").addClass(\"DarkMode\"); $('#modeicon').attr(\"xlink:href\", \"#icon-sun\") } else { $(\"html\").removeClass(\"DarkMode\"); $('#modeicon').attr(\"xlink:href\", \"#icon-_moon\") } } BackTOP(); volantis.dark.push(switchNightMode); /*================================ 动态标题JS =================================*/ var OriginTitle = document.title; document.addEventListener('visibilitychange', function () { if (document.hidden) { document.title = '╭(°A°`)╮ 你去哪了? 快回来!!!'; }else { document.title = '(ฅ>ω"},{"title":"","date":"2023-02-13T12:44:06.871Z","updated":"2023-02-13T12:43:49.430Z","comments":true,"path":"js/jquery-3.6.3.js","permalink":"https://blog.bakalu.site/js/jquery-3.6.3.js","excerpt":"","text":"/*! * jQuery JavaScript Library v3.6.3 * https://jquery.com/ * * Includes Sizzle.js * https://sizzlejs.com/ * * Copyright OpenJS Foundation and other contributors * Released under the MIT license * https://jquery.org/license * * Date: 2022-12-20T21:28Z */ ( function( global, factory ) { \"use strict\"; if ( typeof module === \"object\" && typeof module.exports === \"object\" ) { // For CommonJS and CommonJS-like environments where a proper `window` // is present, execute the factory and get jQuery. // For environments that do not have a `window` with a `document` // (such as Node.js), expose a factory as module.exports. // This accentuates the need for the creation of a real `window`. // e.g. var jQuery = require(\"jquery\")(window); // See ticket trac-14549 for more info. module.exports = global.document ? factory( global, true ) : function( w ) { if ( !w.document ) { throw new Error( \"jQuery requires a window with a document\" ); } return factory( w ); }; } else { factory( global ); } // Pass this if window is not defined yet } )( typeof window !== \"undefined\" ? window : this, function( window, noGlobal ) { // Edge"},{"title":"被猫猫弄乱的标签","date":"2023-03-16T11:24:40.000Z","updated":"2023-03-16T03:25:42.322Z","comments":true,"path":"tags/index.html","permalink":"https://blog.bakalu.site/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"2023年\"縱\" 總結","slug":"Year-end-Summary","date":"2023-12-16T13:05:40.000Z","updated":"2023-12-28T06:21:27.774Z","comments":true,"path":"Year-end-Summary/","link":"","permalink":"https://blog.bakalu.site/Year-end-Summary/","excerpt":"","text":"前言 2023年，是我開始 Blog 創作生涯的第二年，雖然沒有把這個當作一項本職工作，但回顧過去的一年，我取得了一些成績，也遇到了一些挑戰。總體而言，我對自己的表現感到滿意，但也意識到還有很多需要改進的地方。 回顧過去那些破爛喵喵事 最大成就 今年最大成就莫過於11月，我的 Maimai Rating 從 14000 上升到了 15000。這算是終於實現了成績上的自我認可（?）我不知道，但這讓我感到非常高興。雖然說，很多人的能力都比我強很多，但是我還是靠我自己達成了這一項成就。 最大迷茫 喵喵從今年畢業之後真的是發現，在學校遇上疫情，學到的東西完全就是空白一張紙，所學的東西之前都有過接觸，但也不能說完全熟悉精通能夠掌握這一項技能，所以現在處在一個很尷尬的階段。 喵喵不想工作，工作好可怕QAQ 最驚險的一集 由於域名過期，我的 Blog 在 10 月一度無法訪問。雖然沒有在運營自己的Blog但是對於域名過期導致無法訪問這件事情我完全不能接受！！重新購買域名並重新部署之後恢復了訪問，但這樣一年一年的續費也不是長久之計… 挑戰 創作時間不足 在過去的一年裡，我的工作和學業都很忙碌，因此創作時間比較有限。這導致我無法像以前那樣頻繁地更新 Blog。其實大多數情況是自己根本不知道要寫什麼，我沒有技術大佬維護開源項目的技術，也沒有很好的文采去寫一些自己的東西，折騰過來折騰過去的也都是網路上面已經有的東西所以…我真的不知道該怎麼繼續運營下去。 重生之我的匯編技術超級爛的情況下還想要找到一份匯編的工作 後端真的好難啊，真的好難，好難…我想換前端了，但是前端國內大多數都用VueJS我連Vue官方的文檔實例我都看不懂完全就是一臉矇蔽的狀態，第一眼看到的時候我就在想： 這還是JS嗎，這是啥啊，這東西怎麼這麼奇怪，怎麼實現的，毫無規律啊！！！ 展望未來 在未來的一年裡，我希望能夠克服上述挑戰，繼續提升自己的 Blog 創作水平。具體而言，我會在以下方面努力： 提高創作頻率 我將採取以下措施來提高創作頻率： 利用碎片時間 我將在等待公交、吃飯等碎片時間裡，用手機或筆記本電腦記錄下靈感，或者寫一篇小短文。也可能會把自己出去旅遊啊、和喵友面基什麼的事情寫下來放到Blog上面。 將創作融入日常生活 我將嘗試將創作融入到日常生活之中。例如，在逛街時，我可以觀察周圍的人和事，並將這些觀察寫成文章；在看電影時，我可以思考電影中的情節和寓意，並寫成一篇影評；還有在折騰一些事情的時候，如果遇到了網路上文檔過於老舊，但是自己悟出來了新方法折騰出來也會寫成文章發到上面來！ 制定創作計劃 我可能會制定一個創作計劃，並按照計劃進行創作。例如，我可以每週制定一篇文章的題目和大綱，並在週末完成寫作。這樣，我就可以更加有條理地進行創作，並提高創作效率。（但是我很懶… 拓展創作領域 我將嘗試在不同的領域進行創作，例如遊戲、電影、音樂等。我將不斷學習新的知識，以拓寬自己的創作視野。 遊戲：我將嘗試撰寫遊戲評測、遊戲攻略、遊戲創意等文章。 電影：我將嘗試撰寫影評、電影幕後故事等文章。 音樂：我將嘗試撰寫我比較喜歡的音樂推薦等文章。 提高創作質量 我將更加注重文章的內容和質量，力爭製作出更加有趣、有深度、有價值的文章。我將更加嚴格地審核自己的文章，並不斷改進自己的寫作水平。 內容：我將更加注重文章內容的豐富性、趣味性和深度。我將努力為讀者提供有價值的信息和見解。 結構：我將更加注重文章結構的嚴謹性和清晰性。我將使文章的邏輯更加清晰，讓讀者能夠輕鬆理解文章內容。 語言：我將更加注重文章語言的準確性和流暢性。我將使用更簡潔明瞭的語言，讓文章更加易讀。 創作瓶頸 創作瓶頸是我開始作爲創作者遇到的一個問題。當創作靈感枯竭時，很容易陷入瓶頸，導致創作效率降低。 我認為，克服創作瓶頸的方法主要有以下幾點： 多閱讀、多思考 閱讀是獲取新知識和靈感的重要途徑。多閱讀不同類型的書籍，可以拓寬自己的思路，激發自己的創作靈感。 嘗試不同的創作方式 不要局限于一種創作方式，可以嘗試不同的創作方式，例如寫作、繪畫、攝影等。不同的創作方式可以幫助你打破思維定式，激發新的創作靈感。 與其他創作者交流 與其他創作者交流可以互相學習、互相激勵。多與其他創作者交流，可以幫助你找到新的創作方向。 我相信，只要我不斷努力，我一定能夠克服創作瓶頸，提升自己的創作水平。 總之，我覺得最重要的還是要做好計劃，強迫自己養成按照計劃行事的一種習慣吧，過去的破事就讓他過去吧，2023年，最糟糕的一年，還有什麼能比這一年更糟糕吶？2024，別來無恙。","categories":[{"name":"總結","slug":"總結","permalink":"https://blog.bakalu.site/categories/%E7%B8%BD%E7%B5%90/"}],"tags":[{"name":"唬爛","slug":"唬爛","permalink":"https://blog.bakalu.site/tags/%E5%94%AC%E7%88%9B/"},{"name":"計劃","slug":"計劃","permalink":"https://blog.bakalu.site/tags/%E8%A8%88%E5%8A%83/"},{"name":"落落格下一年要做什麼","slug":"落落格下一年要做什麼","permalink":"https://blog.bakalu.site/tags/%E8%90%BD%E8%90%BD%E6%A0%BC%E4%B8%8B%E4%B8%80%E5%B9%B4%E8%A6%81%E5%81%9A%E4%BB%80%E9%BA%BC/"},{"name":"年終總結","slug":"年終總結","permalink":"https://blog.bakalu.site/tags/%E5%B9%B4%E7%B5%82%E7%B8%BD%E7%B5%90/"}]},{"title":"復活啦！！","slug":"newUpdate","date":"2023-11-17T17:34:32.000Z","updated":"2023-11-17T09:51:14.853Z","comments":true,"path":"newUpdate/","link":"","permalink":"https://blog.bakalu.site/newUpdate/","excerpt":"","text":"恭喜我的blog復活! 額…然後是 我的Blog友鏈需要大返修，不存在而且聯繫不上的友鏈將會被刪除","categories":[],"tags":[{"name":"日常","slug":"日常","permalink":"https://blog.bakalu.site/tags/%E6%97%A5%E5%B8%B8/"}]},{"title":"GoLang教程","slug":"Go-Tutorial","date":"2023-03-31T20:07:28.000Z","updated":"2023-03-31T13:11:43.483Z","comments":true,"path":"Go-Tutorial/","link":"","permalink":"https://blog.bakalu.site/Go-Tutorial/","excerpt":"","text":"Go学习笔记 流程控制 流程控制语句时用来控制程序中的各语句执行顺序的语句，可与其他语句组成一定功能的小逻辑模块 分为三大类： 顺序结构 条件判断 if 循环结构 for if 分支（单分支） 123if ·[Conditions]·&#123; ·[Codes]· &#125; 注意： GoLang中可以不写条件表达式两边的括号 if和表达式之间必须要有空格 GoLang必须要有大括号 赶回结果如果为False则直接跳过&#123;Codes&#125; if中可以直接用 name := Content;codes定义变量 if分支（双分支） 12345if ·[Conditions]·&#123; ·[Codes]·&#125;else&#123; ·[Codes]·&#125; if分支（多分支） 1234567if ·[Conditions]·&#123; ·[Codes]·&#125;else if&#123; ·[Codes]·&#125;else if&#123; ·[Codes]·&#125; 如果在多分支中已经执行了一个分支那么下面的分支则不会在进行判断执行 Switch分支 12345678switch ·[Conditions]·&#123;case [value1],[value2],...: Codescase [value3],[value4],...: Codesdefault: Codes&#125; for循环 123for [index] ; [conditions(bool)] ; [excution]&#123; Codes&#125; 注释： Switch后面接一个表达式（常量、变量、具有返回值的函数等都可以） case后面如果是常量值则不能重复 switch后面各个值的数据类型必须匹配 case后面可以接多个值但需要用,分割 case后面不用携带break 可选择的default位置可以随意 switch也可以当作if分支使用 switch后面也可以直接声明/定义一个变量但是不推荐 switch穿透可以用fallthrough关键字，如果在case后面接一个fallthrough关键字则会执行下一个case也叫做switch穿透 数组 数组是同一种数据类型元素的集合。 在Go语言中，数组从声明时就确定，使用时可以修改数组成员，但是数组大小不可变化。 一维数组 数组定义 1var [name] [num]type 数组初始化 使用初始值列表 1234var testArray [3]int //数组会初始化为int类型的零值var numArray = [3]int&#123;1, 2&#125; //使用指定的初始值完成初始化 动态数组长度 1var numArray = [...]int&#123;1, 2&#125; 使用索引值 1a := [...]int&#123;1: 1, 3: 5&#125; 索引值从下标0开始 数组的遍历 基于for循环 123for i := 0; i&lt;len(nameArray);i++&#123; fmt.Println(nameArray[i])&#125; 基于for range遍历 12345for index,value := range nameArray&#123; fmt.Println(index)&#125;//如果将index换成_//输出value则可以不要数组的索引 二维数组 二维数组即数组中嵌套了另一个数组，二维数组的[3][2]代表的是：一共有三组数据，每一组的数据内含有2个数据 定义： 123456func main() &#123; a := [3][2]string&#123; &#123;&quot;0,0&quot;, &quot;0,1&quot;&#125;, &#123;&quot;1,0&quot;, &quot;1,1&quot;&#125;, &#123;&quot;2,0&quot;, &quot;2,2&quot;&#125;, &#125; 对于二维数组的遍历可以使用forrange嵌套的方法输出 1234567for _, value := range a &#123; for _, value1 := range value &#123; fmt.Printf(&quot;%s\\t&quot;, value2) &#125; fmt.Println() &#125;&#125; 二维数组只有外层可以使用[...]的写法，不支持内层的动态写法 123456func main()&#123; a := [...][2]string&#123; &#123;&quot;...&quot;,&quot;...&quot;&#125;, ... &#125;&#125; 但是二维数组是可以支持到动态写法的，只是在使用的时候不能用[...]的写法，如果要使用动态二维数组需要配合make进行数组初始化，如果不进行初始化也可以通过创建一维数组用append()加到二维数组之中。 使用make对二维数组进行初始化 参考代码 123456789101112131415161718192021package mainimport ( &quot;fmt&quot;)func main() &#123; n := 2 m := 3 //动态创建二维数组 grid := make([][]int, n) for i := 0; i &lt; n; i++ &#123; grid[i] = make([]int, m) &#125; for i := 0; i &lt; n; i++ &#123; for j := 0; j &lt; m; j++ &#123; fmt.Print(grid[i][j]) &#125; fmt.Println() &#125;&#125; 执行结果: 000 000 使用append对空的二维数组内容进行添加 参考代码 123456789101112131415161718192021222324package mainimport &quot;fmt&quot;func main() &#123; // 创建空的二维数组 animals := [][]string&#123;&#125; // 创建三一维数组，各数组长度不同 row1 := []string&#123;&quot;fish&quot;, &quot;shark&quot;, &quot;eel&quot;&#125; row2 := []string&#123;&quot;bird&quot;&#125; row3 := []string&#123;&quot;lizard&quot;, &quot;salamander&quot;&#125; // 使用 append() 函数将一维数组添加到二维数组中 animals = append(animals, row1) animals = append(animals, row2) animals = append(animals, row3) // 循环输出 for i := range animals &#123; fmt.Printf(&quot;Row: %v\\n&quot;, i) fmt.Println(animals[i]) &#125;&#125; *多维数组 多维数组可以暂时不进行了解，下面拿三维数组作为案例 123456789package mainimport &quot;fmt&quot;func main() &#123; var m3 [3][2][5]int fmt.Println(m3)&#125; 执行结果为：[[[0 0 0 0 0] [0 0 0 0 0]] [[0 0 0 0 0] [0 0 0 0 0]] [[0 0 0 0 0] [0 0 0 0 0]]] 其实三维数组可以看作为多个二维数组的嵌套，这里的[3][2][5]代表的就是创建一个新的总长度为3的多维数组，每个数组里面嵌套有两个数组，嵌套的每个数组内有5个值 函数 基本语法： 1234func [name] (形参列表) (返回值类型)&#123; [Codes] return + 返回值&#125; 不需要的返回值可以直接使用_忽略返回值 函数内存分析 12345678910111213141516package mainimport &quot;fmt&quot;func exchangeNum(num1 int, num2 int) &#123; var temp int temp = num1 num1 = num2 num2 = temp&#125;func main() &#123; var num1, num2 int = 10, 20 fmt.Printf(&quot;交换前: num1 = %d，num2 = %d\\n&quot;, num1, num2) exchangeNum(num1, num2) fmt.Printf(&quot;交换后: num1 = %d，num2 = %d\\n&quot;, num1, num2)&#125; 以上执行结果不变，函数未起作用 原因如下： 当自定义函数执行完成后，Go会将函数存在的空间删除，以上程序仅在函数内进行数字交换但是并没有与main函数内的变量进行交换 因为函数的基本数据类型和数组默认都是值传递的，在函数内的任何修改都不会影响到原来的值 解决方案： 可以将函数内的变量使用指针记录到内存地址里面，当在执行函数的时候程序会交换地址（内的数值）将输入的值进行交换，使用&amp;num1,&amp;num2来查看地址对应的值，这就是通过调取地址的方法在函数内用指针的方式操作变量，从效果看类似于引用传递 123456789101112131415161718192021222324252627package mainimport &quot;fmt&quot;-func exchangeNum(num1 int, num2 int) &#123;+func exchangeNum(num1 *int, num2 *int) &#123; var temp int- temp = num1- num1 = num2- num2 = temp+ temp = *num1+ *num1 = *num2+ *num2 = temp&#125;func main() &#123; var num1, num2 int = 10, 20 fmt.Printf(&quot;交换前: num1 = %d，num2 = %d\\n&quot;, num1, num2)- exchangeNum(num1, num2)+ exchangeNum(&amp;num1, &amp;num2) fmt.Printf(&quot;交换后: num1 = %d，num2 = %d\\n&quot;, num1, num2)&#125;/** 此处出现的diff语法为* 红色为源代码删除的部分* 绿色为修改后的部分*/ 函数重载 Go语言中不支持函数重载，即不能使用同一个函数在下方直接更改形参重新生成为新的函数，例: 12345678910func exchangeNum(num1 int, num2 int) &#123; var temp int temp = num1 num1 = num2 num2 = temp&#125;func exchangeNum(num1 int) &#123; var temp int temp = num1&#125; 如果需要重载，则需要将函数的形参（参数）变为可变参数，在函数的[name]后面增加...就可以变成可变参数 123456789101112131415package mainimport &quot;fmt&quot;func reFunc(nums ...int) &#123; fmt.Println(nums)&#125;func main() &#123; reFunc(0) fmt.Println() reFunc(10) fmt.Println() reFunc(10, 20, 30, 40, 50)&#125; 执行结果: 123456[0][10][10 20 30 40 50] 在处理可变参数时，Go语言会将可变参数看作为切片处理（可以看作为数组） 可以使用遍历将可变参数内的数值遍历出来 1234567891011121314151617package mainimport &quot;fmt&quot;func reFunc(nums ...int) &#123; for i := 0; i &lt; len(nums); i++ &#123; fmt.Println(nums[i]) &#125;&#125;func main() &#123; reFunc(0) fmt.Println() reFunc(10) fmt.Println() reFunc(10, 20, 30, 40, 50)&#125; 切片 因为数组的长度是固定的并且数组长度属于类型的一部分，所以数组有很多的局限性 切片的本质实际上就是对底层数组的一个封装 声明切片类型的基本语法如下： var name []T 在构造切片的时候，索引范围为 左包含右不包含 获取切片 基于数组定义 1234567891011package mainimport &quot;fmt&quot;func main() &#123; a := [5]int&#123;33, 44, 55, 66, 77&#125; b := a[1:4] //从位置为 1 的数值开始取，取到第 4 歌数值 fmt.Println(a) fmt.Println(b) fmt.Printf(&quot;类型: %T\\n&quot;, b)&#125; 输出结果为: [33 44 55 66 77] [44 55 66] 类型: []int 通过make函数进行构造 基本格式：make([]T, size, cap) []T 为切片类型 size为元素数量 cap 为切片容量 12345func main() &#123; c := make([]int, 5, 10) fmt.Printf(&quot;%T\\n&quot;, c) fmt.Println(c)&#125; 切片的长度和容量 在GoLang中可以用内置的函数对切片的长度和容量进行获取 len() 函数获取切片长度 cap() 函数获取切片容量 对切片进行再次的切片操作的时，上限边界 是 切片容量 cap() 而不是长度len()，所以常量索引必须是非负的并且在int类型的值限度内，对于其它类型的切片（如常量字符串）常量索引也必须在有效的范围内。 如果low和high两个指标都是常数，它们必须满足low &lt;= high。如果索引在运行时超出范围，就会发生运行时panic。 判断切片是否为空 只能使用len(s) == 0 判断 切片比较 切片之间没有办法进行比较，所以也不可以用==判断两个切片内是否包含有相同的元素，唯一合法的操作是只能与nil进行比较 一个nil值的切片并没有底层数组，一个nil值的切片的长度和容量都是0。但是我们不能说一个长度和容量都是0的切片一定是nil 如下实例： 123var s1 []int //len(s1)=0;cap(s1)=0;s1==nils2 := []int&#123;&#125; //len(s2)=0;cap(s2)=0;s2!=nils3 := make([]int, 0) //len(s3)=0;cap(s3)=0;s3!=nil 切片的赋值 如果要对切片进行赋值操作可以直接使用下标对切片对应的下标进行一个赋值操作 123456func main() &#123; a := []int&#123;0, 0, 0&#125; a[0] = 100&#125; 切片的赋值拷贝 切片的复制可以通过以下的方法进行： 123456789func main() &#123; a := []int&#123;0, 0, 0&#125; b := a fmt.Printf(&quot;%d %d\\n&quot;, a, b) b[0] = 100 fmt.Printf(&quot;%d %d\\n&quot;, a, b)&#125; 执行结果: [0 0 0] [0 0 0] [100 0 0] [100 0 0] 将变量b直接进行b:= a的赋值操作，这样b就与a共用一个内存地址，b发生变化a也相对应的发生变化。 切片的遍历 切片的底层为数组，所以切片一样可以用for range和索引遍历 for range遍历 1234567func main() &#123; a := []int&#123;22, 33, 44, 55, 66&#125; for _, v := range a &#123; fmt.Println(v) &#125;&#125; 索引遍历 1234567func main() &#123; a := []int&#123;22, 33, 44, 55, 66&#125; for i := 0; i &lt; len(a); i++ &#123; fmt.Println(i, a[i]) &#125;&#125; 使用append()对切片进行元素添加 123456789func main() &#123; a := []int&#123;&#125; a = append(a, 10) for i := 0; i &lt; 10; i++ &#123; a = append(a, i+1) fmt.Printf(&quot;%d\\t len:%d\\t cap:%d\\n&quot;, a, len(a), cap(a)) &#125;&#125; 执行结果: [10 1] len:2 cap:2 [10 1 2] len:3 cap:4 [10 1 2 3] len:4 cap:4 [10 1 2 3 4] len:5 cap:8 [10 1 2 3 4 5] len:6 cap:8 [10 1 2 3 4 5 6] len:7 cap:8 [10 1 2 3 4 5 6 7] len:8 cap:8 [10 1 2 3 4 5 6 7 8] len:9 cap:16 [10 1 2 3 4 5 6 7 8 9] len:10 cap:16 [10 1 2 3 4 5 6 7 8 9 10] len:11 cap:16 当通过append()对切片进行动态元素添加时，append()切片会自动判断容量是否足够下次的元素添加，所以在输出容量时会发现切片的容量在不断地增加 append()一次添加多个元素 append()也支持一次添加多个元素 123456func main() &#123; a := []int&#123;&#125; a = append(a, 10, 9, 8, 7, 6) fmt.Println(a)&#125; 执行结果：[10 9 8 7 6] 同时，使用append()也可以将另一个切片添加到原有的切片内 123456func main() &#123; a := []int&#123;&#125; b := []int&#123;11, 22, 33, 434&#125; a = append(a, b...) fmt.Println(a)&#125; 执行结果: [11 22 33 434] *切片扩容的策略 可以通过查看$GOROOT/src/runtime/slice.go源码，其中扩容相关代码如下： 1234567891011121314151617181920newcap := old.capdoublecap := newcap + newcapif cap &gt; doublecap &#123; newcap = cap&#125; else &#123; if old.len &lt; 1024 &#123; newcap = doublecap &#125; else &#123; // Check 0 &lt; newcap to detect overflow // and prevent an infinite loop. for 0 &lt; newcap &amp;&amp; newcap &lt; cap &#123; newcap += newcap / 4 &#125; // Set newcap to the requested cap when // the newcap calculation overflowed. if newcap &lt;= 0 &#123; newcap = cap &#125; &#125;&#125; 从上面的代码可以看出以下内容： 首先判断，如果新申请容量（cap）大于2倍的旧容量（old.cap），最终容量（newcap）就是新申请的容量（cap）。 否则判断，如果旧切片的长度小于1024，则最终容量(newcap)就是旧容量(old.cap)的两倍，即（newcap=doublecap）， 否则判断，如果旧切片长度大于等于1024，则最终容量（newcap）从旧容量（old.cap）开始循环增加原来的1/4，即（newcap=old.cap,for {newcap += newcap/4}）直到最终容量（newcap）大于等于新申请的容量(cap)，即（newcap &gt;= cap） 如果最终容量（cap）计算值溢出，则最终容量（cap）就是新申请容量（cap）。 需要注意的是，切片扩容还会根据切片中元素的类型不同而做不同的处理，比如int和string类型的处理方式就不一样。 使用copy()复制切片 基本语法: copy(destSlice, srcSlice []T) 1234567891011121314package mainimport &quot;fmt&quot;func main() &#123; a := []int&#123;1, 2, 3, 4, 5&#125; b := make([]int, 5) c := b copy(b, a) fmt.Printf(&quot;%p\\t%d\\n&quot;, a, a) fmt.Printf(&quot;%p\\t%d\\n&quot;, b, b) fmt.Printf(&quot;%p\\t%d\\n&quot;, c, c)&#125; 执行结果 a: 0xc00000e450 [1 2 3 4 5] b: 0xc00000e480 [1 2 3 4 5] c: 0xc00000e480 [1 2 3 4 5] 注意：使用copy()复制的切片是给新的切片单独申请一个新的地址，而用赋值:=则是两个切片公用一个相同的地址 切片元素的删除 在GoLang中并没有一个内置函数可以对函数进行删除，当需要删除操作的时候，可以使用append()进行 删除索引为index的元素操作方法为 a = append(a[0:index], a[index+1:]... 1234567func main() &#123; // 从切片中删除元素 a := []int&#123;30, 31, 32, 33, 34, 35, 36, 37&#125; // 要删除索引为2的元素 a = append(a[:2], a[3:]...) fmt.Println(a) //[30 31 33 34 35 36 37]&#125; 原理如下： Go语言排序 GoLang内置了排序的函数包sort所以并不需要自己手写排序方法对切片进行排序 GoLang中sort.Sort使用的是快速排序的方法但不敢保证稳定性，另一种为sort.Stable使用的是稳定排序相对于快速排序稳定 正序排序 123456789101112type SortBy []intfunc (a SortBy) Len() int &#123; return len(a) &#125;func (a SortBy) Swap(i, j int) &#123; a[i], a[j] = a[j], a[i] &#125;func (a SortBy) Less(i, j int) bool &#123; return a[i] &lt; a[j] &#125;func main() &#123; a := []int&#123;3, 7, 8, 9, 1&#125; sort.Sort(SortBy(a)) fmt.Println(a)&#125; 逆序排序 123456func main() &#123; a := []int&#123;3, 7, 8, 9, 1&#125; sort.Sort(sort.Reverse(sort.IntSlice(a))) fmt.Println(a)&#125; 字符数组排序 1234567891011121314151617181920package main import ( &quot;fmt&quot; &quot;sort&quot;) func main() &#123; a := []int&#123;3, 5, 4, -1, 9, 11, -14&#125; sort.Ints(a) fmt.Println(a) ss := []string&#123;&quot;surface&quot;, &quot;ipad&quot;, &quot;mac pro&quot;, &quot;mac air&quot;, &quot;think pad&quot;, &quot;idea pad&quot;&#125; sort.Strings(ss) fmt.Println(ss) sort.Sort(sort.Reverse(sort.StringSlice(ss))) fmt.Printf(&quot;After reverse: %v\\n&quot;, ss)&#125; *稳定排序 1234567891011121314151617181920212223242526272829303132333435363738type person struct &#123; Name string Age int&#125;type personSlice []personfunc (s personSlice) Len() int &#123; return len(s) &#125;func (s personSlice) Swap(i, j int) &#123; s[i], s[j] = s[j], s[i] &#125;func (s personSlice) Less(i, j int) bool &#123; return s[i].Age &lt; s[j].Age &#125;func main() &#123; a := personSlice&#123; &#123; Name: &quot;AAA&quot;, Age: 55, &#125;, &#123; Name: &quot;BBB&quot;, Age: 22, &#125;, &#123; Name: &quot;CCC&quot;, Age: 0, &#125;, &#123; Name: &quot;DDD&quot;, Age: 22, &#125;, &#123; Name: &quot;EEE&quot;, Age: 11, &#125;, &#125; sort.Stable(a) fmt.Println(a)&#125; 指针 Go语言中的指针与C语言指针不同如下 默认值是null *定义指针类型，&amp;取地址 不支持指针运算不支持-&gt;运算直接用.访问目标 基本概念 指针就是地址，指针就是存储地址的变量。 *p在使用时为取值运算符（间接引用）","categories":[{"name":"筆記","slug":"筆記","permalink":"https://blog.bakalu.site/categories/%E7%AD%86%E8%A8%98/"}],"tags":[{"name":"GoLang","slug":"GoLang","permalink":"https://blog.bakalu.site/tags/GoLang/"},{"name":"教學","slug":"教學","permalink":"https://blog.bakalu.site/tags/%E6%95%99%E5%AD%B8/"}]},{"title":"关于咱为什么这么长时间没有更新","slug":"wy-longtime-nonupdate","date":"2023-03-16T22:00:15.000Z","updated":"2023-03-16T15:14:28.263Z","comments":true,"path":"wy-longtime-nonupdate/","link":"","permalink":"https://blog.bakalu.site/wy-longtime-nonupdate/","excerpt":"","text":"更新内容 先说一下咱消失的这段时间都更新了什么 最大的更新就是将主题从头到尾全部更换了，也不在沉迷于魔改，平平淡淡才是真 结尾有更详细的更新说明（咱承认是凑字数用的） 消失！？跑路！？ 至于为什么消失是咱觉得，Hexo好难搞啊，好麻烦啊，但是去隔壁Hugo体验了一番虽然说配置和搭建更容易了但是…好像更难啊！！！ 所以才会消失这么长时间，消失的这段时间瓷砖都没有贴QAQ空了一大片（说好的今年努力把瓷砖贴满的） 之后几天应该会把咱在自学GoLang的笔记po上来，也算是和各路大佬交流一下什么的，有错误还可以让大佬指出来… 你们不想看的更新日志（所以我隐藏了） 2023更新日志2023-01 ver 1.5更换了主题主页面元素增加导航烂增加顶栏增加主题右键菜单修改2023-03 ver 2.0修改了网站的背景图增加了网站导航烂的描述更换了主页面的个人资料图片更新 标签 页面更新 分类 页面更新 友链 页面","categories":[{"name":"日常","slug":"日常","permalink":"https://blog.bakalu.site/categories/%E6%97%A5%E5%B8%B8/"}],"tags":[{"name":"更新","slug":"更新","permalink":"https://blog.bakalu.site/tags/%E6%9B%B4%E6%96%B0/"}]},{"title":"Talk-Update","slug":"Talk-Update","date":"2023-01-09T11:42:36.000Z","updated":"2023-03-16T14:36:59.594Z","comments":true,"path":"Talk-Update/","link":"","permalink":"https://blog.bakalu.site/Talk-Update/","excerpt":"","text":"寫這篇文章就是想要講 Disqus已經完全拋棄了！因爲某些我不知道的原因Disqus被Startpage的插件攔截 所以我換成了更方便一點的Gitalk，之後可能連旁邊的那個也給換掉 主要是我懶得而且沒有錢再續一年的VPS但是用到6月應該沒什麼問題 啊…還有哦 封面是我 自己畫的 是不是很可愛！快說可愛！ 好耶~又水了一篇文章w","categories":[{"name":"小型更新","slug":"小型更新","permalink":"https://blog.bakalu.site/categories/%E5%B0%8F%E5%9E%8B%E6%9B%B4%E6%96%B0/"}],"tags":[{"name":"唬爛","slug":"唬爛","permalink":"https://blog.bakalu.site/tags/%E5%94%AC%E7%88%9B/"},{"name":"水","slug":"水","permalink":"https://blog.bakalu.site/tags/%E6%B0%B4/"}]},{"title":"2022喵喵落落格的年終總結耶！","slug":"The-End-of-2022","date":"2022-12-31T21:46:24.000Z","updated":"2023-12-28T03:39:16.876Z","comments":true,"path":"The-End-of-2022/","link":"","permalink":"https://blog.bakalu.site/The-End-of-2022/","excerpt":"","text":"要新年了 首先嘛，新年祝一直支持訪問以及關注落落格的貓貓們新年都有很多很多貓娘喫~也能成功度過這次的肺炎病毒的襲擊成爲超級健康貓貓。 落落格今年發生的事情 落落格到明天就是成立3個月的時候了，這三個月裏面，咱經歷了很多事情包括修改主題、搭建評論系統這些，但落落格到目前來說還是有很多的地方可以進行修改，在不停的修改之間落落格的各項功能也會變得相對完整最後變成咱想象中的樣子。當然咱也通過折騰的這麼長時間積累了不少的東西，對咱所用的框架和評論系統之類的熟練程度也是有很大的提高喵。 喵喵站長的變化 喵喵站長從之前的什麼都不會甚至把很多個Blog搭建起來就放到一邊不管的情況到現在能夠一直更新落落格（雖然說…想起來就寫一下文章然後進入潛水狀態）也是一點點的小小變化吧。今年咱認識了很多的可愛喵喵也失去了幾個比較要好的喵喵…咱希望咱認識和熟悉的喵喵能夠一直好好的，不要隨意就放棄自己的喵生什麼的…會很不開心的… 因爲馬斯克收購Twitter的關係，喵也開始更新自己的其他實例了（馬斯克該死） 雖然在今年的結尾喵喵感染了肺炎病毒但還好沒有什麼很嚴重的QAQ 新年計劃 優化落落格的各種方面 認識更多的喵喵醬 和更多的喵喵一起贴貼一起喵喵喵 喵喵喵喵喵喵喵喵 最後祝喵喵們 新年快樂，有更多喵娘喫！","categories":[{"name":"總結","slug":"總結","permalink":"https://blog.bakalu.site/categories/%E7%B8%BD%E7%B5%90/"}],"tags":[{"name":"唬爛","slug":"唬爛","permalink":"https://blog.bakalu.site/tags/%E5%94%AC%E7%88%9B/"},{"name":"計劃","slug":"計劃","permalink":"https://blog.bakalu.site/tags/%E8%A8%88%E5%8A%83/"},{"name":"新年","slug":"新年","permalink":"https://blog.bakalu.site/tags/%E6%96%B0%E5%B9%B4/"},{"name":"落落格下一年要做什麼","slug":"落落格下一年要做什麼","permalink":"https://blog.bakalu.site/tags/%E8%90%BD%E8%90%BD%E6%A0%BC%E4%B8%8B%E4%B8%80%E5%B9%B4%E8%A6%81%E5%81%9A%E4%BB%80%E9%BA%BC/"}]},{"title":"如何提升你的OSU!Mania底力 [持續更新...]","slug":"HowToUpgradeYourOSUmaniaAbility","date":"2022-12-04T15:08:13.000Z","updated":"2023-03-16T14:36:43.601Z","comments":true,"path":"HowToUpgradeYourOSUmaniaAbility/","link":"","permalink":"https://blog.bakalu.site/HowToUpgradeYourOSUmaniaAbility/","excerpt":"","text":"警告！本文章僅從個人經驗角度出發，具體需要考慮到個人的地力水平和承受能力，請不要完全依賴文章所講的內容練習，僅供參考。如果有出現錯誤或者需要修改內容歡迎在評論區留言。 同時，封面圖片僅供參考實際情況因人而異。 Part.0 適合閱讀文章的人群 已經擁有一部分的音樂遊戲基礎，且擁有足夠的節奏感 有一定的英文基礎，認識 28 26個英文字母 有一个自己的OSU帐号 Part.1 一切的起源 - 键位 對於一名想要開始入坑 O!m 或是想要要從 STD 跨越到 O!m 的玩家來講，首先需要設置一個讓你感覺最舒服的鍵位，這裏以 4K 的官方默認鍵位講，並不是所有人都適合 D F J K 這類型的緊湊型案件排布。當然這一切都要在你嘗試幾次之後做出決定。 不推薦在熟悉默認鍵位之後修改鍵位，當熟悉鍵位之後突然之間的切換會讓你的地力降低，重新熟悉鍵位需要一段時間，這段時間足夠可以練習更多類型的圖。其次，由於默認鍵位太過於緊湊，再打高難度的曲子 有可能 會出現錯亂的情況。所以不是很推薦使用官方提供的默認鍵位和在熟悉設置的鍵位之後突然修改鍵位的情況。","categories":[{"name":"技術提升","slug":"技術提升","permalink":"https://blog.bakalu.site/categories/%E6%8A%80%E8%A1%93%E6%8F%90%E5%8D%87/"}],"tags":[{"name":"OSU","slug":"OSU","permalink":"https://blog.bakalu.site/tags/OSU/"},{"name":"HowTo","slug":"HowTo","permalink":"https://blog.bakalu.site/tags/HowTo/"}]},{"title":"落落格未來規劃","slug":"future-planning","date":"2022-11-14T13:04:42.000Z","updated":"2023-03-16T14:36:36.688Z","comments":true,"path":"future-planning/","link":"","permalink":"https://blog.bakalu.site/future-planning/","excerpt":"","text":"其實談什麼未來規劃根本就沒有什麼規劃 每次想到一個想法都會開始 頭腦風暴 到底這個文章適不適合發到落落格上面，會不會造成一些什麼不太好的或者說…會不會踩到一部分人的地雷…非常糾結… 有時候是真的不想把一些不太好的東西po上來 因爲落落格是託管在Github上面的，有爭議或者涉及建政的一些東西就不能po上來。再者本喵的文采真的沒有很好，都是寫一堆有的沒的很口語化的文章。 但是落落格的意義不就是把自己想到的東西記錄下來嘛 所以，以後想到什麼就寫什麼好了… 日常文章和唬爛文章會多一點","categories":[],"tags":[{"name":"唬爛","slug":"唬爛","permalink":"https://blog.bakalu.site/tags/%E5%94%AC%E7%88%9B/"},{"name":"規劃","slug":"規劃","permalink":"https://blog.bakalu.site/tags/%E8%A6%8F%E5%8A%83/"}]},{"title":"Rimworld遊戲基礎不完全指北","slug":"rimworld-tutorial","date":"2022-11-08T15:13:25.000Z","updated":"2023-03-16T14:36:54.851Z","comments":true,"path":"rimworld-tutorial/","link":"","permalink":"https://blog.bakalu.site/rimworld-tutorial/","excerpt":"","text":"RimWorld 不完全基礎指北 前言 首先，對於 RimWorld 網路上面有很多教程包括巴哈什麽的，本篇教程僅僅是自己根據游玩的經驗和藉鑒相關的教程總結出來的，所以，對剛接觸 RimWorld 的這款游戲的玩家比較友好。 也因爲 RimWorld 的自帶的翻譯令人一言難盡，對剛接觸游戲的玩家過了新手教程可能也不知道游戲的相關玩法，這篇文章能夠讓你理解這款游戲的基礎玩法。 (教程自帶目錄，不想看的地方可以直接跳過 XD) 基礎内容 RimWorld是一款類似廢土建造生存的2D沙盒游戲，總之經典模式就是自選3人，在這裏活下去並建立自己的殖民地（有點類似缺氧但是難度相比缺氧要友好一點）。 基本玩法 如果你看不懂 ENGLISH 建議先將語言修改爲 中文，游戲選單右下角就是修改語言的地方。 創建殖民地 這裏不需要過多描述你也可以知道點擊哪個按鈕創建殖民地，當然也可以先看一遍游戲教學。 在創建殖民地的時候建議選擇 墜落 脚本，也可以自己創建專屬於自己的脚本進行游玩，教程以 墜落 脚本爲基礎。 實際上Stream創意工坊的自定義脚本才好玩 對於 AI故事敘述者 更像是整個殖民地（游戲）的大難度，這裏直接截取Wikipedia上面的解釋。 “经典”卡桑德拉，借由逐渐增加负面事件，平顺地增加游戏的难度。 “友善”菲比，在每一个负面事件之间，有很长时间的和平，但是如果调高难度的话，仍然对玩家很有挑战性。 “随兴”兰迪，在随机间隔的游戏期间，提供无法预期的事件。负面事件发生的频率和规模是随机产生，并且可能发生在任何时间。 因爲是教程，所以以 經典卡桑德拉 的 簡單 難度（對於剛剛接觸這款游戲的也是推薦選擇這種難度），簡單難度會出現少量的襲擊事件，如果防禦措施做的合理，也不會出現很大的損失。但是下面的一定要選擇 自由讀檔模式 ，無悔模式也就是極限模式，無法存檔無法讀檔。 創建世界 創建世界即創建世界 創建世界可以讓你選擇殖民地所在的位置，以及周圍的部落，但是就算是和平模式，如果你的殖民地距離周邊的部落距離太近，就算是中立的部落也會攻擊你的殖民地。 可以根據自己的需求來調整相關的參數 種子：可以隨便填，會影響生成出的地形 生成比例：强烈建議生成比例選擇50%及以上，如果你的電腦性能比較强可以嘗試生成100% 整體降雨量：保持適中，過多和過少都會影響到游戲的可玩性 整體氣溫：保持適中，炎熱會導致過熱農作物無法生長，寒冷會導致殖民地需要隨時保持合適的溫度。 人口密度：不建議選擇稀少，選擇稀少會降低其他部落的商隊來到殖民地的次數 污染：根據自己的需求調整 派系：越豐富玩起來越有意思，但是也不建議完全沒有敵對部落 降落點的選擇 游戲整體的發展進度完全靠你所選擇的降落點。 降落點的選擇推薦下面的屬性： 溫帶森林 地形：平原 移動難度：1 地質類型：花崗岩、大理岩、石灰岩爲主（不要選擇以板岩、砂岩爲主的地質） 平均溫度：全年0度以上，夏季最高溫度不要超過30度 植物生長季：全年 可覓食性：100% 動物放牧：是 Pollution（污染程度）：0 Nearby Pollution（附近污染程度）：越小越好最好為0.00 平均疾病頻率：越小越好 最好距離道路比較近 派系 在降落點選擇的時候，可以點擊下面的 派系 按鈕來查看各個派系的主要人種和關係，要盡量避免附近有敵對派系。中立的派系可以在之後游戲中與商隊進行交易。 理念 如果沒有特別的玩法或者不想要涉獵理念和宗教系統可以選擇 無理念系統 或者 經典理念 不同的理念系統會在游戲初期解鎖不同的内容 創建角色 創建角色決定了你在游戲中殖民地的發展速度和工作效率如何，最終選擇的三個角色團隊能力一定盡可能的達到平衡的狀態，并且所有角色不能有任何負面的能力（debuff） 下面的能力一定要刷掉： 懦弱 心理病態 嗜血狂怒 貪婪 食人族 縱火狂 迷戀藥物 嫉妒 貪吃 喜好藥物 纖纖弱質 仇男（女） 生性緊張 奇醜無比 無法執行的工作盡量不要有，有太多無法執行的工作會拖慢整體的發展速度。年齡不要在50及以上。 必須包含：擅長射擊（射擊等級高）、醫療、烹飪、種植等級6級以上，同時也要包含一個建造的興趣。 可以包含：格鬥、采礦、藝術、手工、高等級的社交，高等級的知識（加速研究） 游戲正篇 進入地圖 在正式進入游戲後，可以使用鍵盤的 A S D W 移動視角，滑鼠 滾輪 可以放大和縮小視角（鍵盤的 PgUP和PgDown也可以實現），Space空白鍵 可以暫停游戲時間，數字鍵 1 2 3 可以調整游戲進行的速度。 儅逃生艙降落以後，所選擇的人物出現后，可以按空白鍵暫停進行規劃。 解禁物品 在游戲中的 建築 選單内，選擇 命令 可以對殖民者發佈命令，選擇 解除禁用 將所有的打了紅色叉叉的物品全部框起來（按住左鍵)，執行完畢之後可以按滑鼠的右鍵取消當前選擇的命令，恢復普通選擇。 裝備武器 降落后一定要第一時間把携帶物資裏面的武器裝備上，槍支類武器對應射擊等級高的殖民者，點擊上方顯示的殖民者，右鍵武器可以進行裝備)，衣物也是相同的方法。 計劃區域 區域規劃可以方便建造相關建築，使用 建築 選單，選擇 命令 内的 計劃 ) 選項，可以對殖民地進行計劃。 種植區域 種植區域一定要選擇在距離出生點 最近的沃土區域 并且範圍 至少要達到 200 在沃土上的作物生長速度最快 可以按照下面的規劃方法進行簡單的規劃 規劃完成之後，在 區域 選項選擇 種植區 左鍵拖出種植區域。 冷藏庫 冷藏庫可以存儲打獵的動物尸體和收割後的農作物防止腐爛，冷庫在前10天可以選擇性的建設但不能不建設。冷庫建議建設在種植區附近，如果附近有間歇泉推薦向間歇泉方向發展。 如果冷藏庫建設在普通的平地上，建議設置雙層墻防止開門造成的溫度上升。 在冷藏庫規劃完成之後，需要進行區域的設置，在 區域 選項内選擇 儲存區，左鍵拖出區域設置儲存區。設置完成之後建議進行一下重新命名 注意：冷藏庫和普通的倉庫一定要進行儲存類型的設置，不設置儲存類型則無法在冷藏庫存儲動物尸體和作物，可以參考下面表格進行設置，除了表格内的物品其他物品均為不允許 點擊設置的區域會在左下角出現區域的信息，儲存區會有儲存按鈕在左下角顯示的信息上方，點擊即可設置。 物品 子類 尸體 全部允許 自然資源 植物原料 製造品 藥品、藥物、麥汁 食物 全部允許 允許大型實體 允許 允許新鮮 允許 倉庫 倉庫位置可以隨意設置，但不建議設置在距離出生點太遠的地方。倉庫用來存儲不需要冷藏但放置在露天環境會老化的物品。 根據冷藏庫相反進行設置即可，設置方法與冷藏庫相同 用餐區、工作區、娛樂區、厨房 用餐區可以空間不需要很大，建議設置在厨房附近。 工作區主要放置研究桌、石材加工台等物品用於加工和研究。 娛樂區可以設置的相對大一點，如果同時有設置理念，可以將儀式點、派對點、冥想點、結婚點設置在娛樂區内 厨房一定要設置 爐灶、屠宰桌、屠宰點 前期可以各設置一個。 住宅區 住宅區可以利用剩餘的空間進行合理的分配，但是每個人的房間不能太小，最少需要6格的寬度才可以。 整體佈局可以參考，當然最終還是需要考慮到出生點地形進行修改，最合適的方案是這種集成式的方案，并且也是最方便的一種方案。 合理規劃和生存下去 在所有區域劃分完成之後，下面就要進行工作的分配。在游戲下方選擇 工作 即可進行安排，一定要開啓自定優先度。 開啓自定優先度可以有更好的工作效率，參考下面的配置進行優先級設置 最高優先級（1級）：消防員、病患、醫生、療養、研究員 高優先級（2級）：厨師、獵人、建築工、農夫、采收者 普通優先級（3級）：清潔、運送員、礦工、鍛造師、工匠 低優先級（4級）：其他工作 建造規劃 前兩天一定要將住宅區建造好，同時進行封頂（規劃屋頂區），住宅區建造好之後是厨房和餐廳，餐廳可以直接建造3x3的木製大桌子，旁邊建造扶手椅。 每個房間都需要添加火把，在第4~5天可以開始建造冷藏庫和發電機，同時開始研究太陽能板和蓄電池。冷藏庫如果空間在200格需要2台空調，空調藍色的朝向冷藏庫裏面，紅色的朝向外面，前期推薦風力發電機和燃木發電機結合的方式提供電力，有了蓄電池和太陽能板之後可以將火把替換成立燈。 再建立一個垃圾區用來放置腐爛和變質的物品。 種植 生存下去最重要的是食物，所以在剛降落的前幾天一定要將種植區域全部種植作物，在種植完成之後需要儘快的將種植植物換成水稻，如果出現枯萎病一定要將所有人采收者的優先級調整爲1優先進行采收，過晚采收將會傳染到整片種植區域。 研究 研究首先要研究太陽能板和蓄電池，最好先研究蓄電池能夠存儲多餘的電力防止浪費。再進行微電子的研究，可以發展機槍塔（防禦）地熱能以及其他的娛樂設施，醫藥也是最重要的研究部分，剩餘的可以視情況進行相應的研究即可。","categories":[{"name":"教程","slug":"教程","permalink":"https://blog.bakalu.site/categories/%E6%95%99%E7%A8%8B/"}],"tags":[{"name":"RimWorld","slug":"RimWorld","permalink":"https://blog.bakalu.site/tags/RimWorld/"},{"name":"教程","slug":"教程","permalink":"https://blog.bakalu.site/tags/%E6%95%99%E7%A8%8B/"}]},{"title":"落落格的第一篇文章","slug":"TheFirstPosts","date":"2022-10-30T21:24:21.000Z","updated":"2023-03-16T14:37:11.371Z","comments":true,"path":"TheFirstPosts/","link":"","permalink":"https://blog.bakalu.site/TheFirstPosts/","excerpt":"","text":"唬爛！不知道多少次寫文了 好久沒有寫文了，記得上次寫文還是在昨天 但是！速度與激情9 還是不知道些什麼… 就是要耍廢！好耶~~ 測試 1print(&quot;唬爛！耶！！！！&quot;) 這裏面會有什麼內容 唬爛 教程 音遊 折騰日記 各種無聊 各種耍廢 各種記錄 還有很多平時在社交平臺上面不會更新的內容","categories":[{"name":"日常","slug":"日常","permalink":"https://blog.bakalu.site/categories/%E6%97%A5%E5%B8%B8/"}],"tags":[{"name":"唬爛","slug":"唬爛","permalink":"https://blog.bakalu.site/tags/%E5%94%AC%E7%88%9B/"},{"name":"Hexo","slug":"Hexo","permalink":"https://blog.bakalu.site/tags/Hexo/"},{"name":"落落格文章","slug":"落落格文章","permalink":"https://blog.bakalu.site/tags/%E8%90%BD%E8%90%BD%E6%A0%BC%E6%96%87%E7%AB%A0/"}]}],"categories":[{"name":"總結","slug":"總結","permalink":"https://blog.bakalu.site/categories/%E7%B8%BD%E7%B5%90/"},{"name":"筆記","slug":"筆記","permalink":"https://blog.bakalu.site/categories/%E7%AD%86%E8%A8%98/"},{"name":"日常","slug":"日常","permalink":"https://blog.bakalu.site/categories/%E6%97%A5%E5%B8%B8/"},{"name":"小型更新","slug":"小型更新","permalink":"https://blog.bakalu.site/categories/%E5%B0%8F%E5%9E%8B%E6%9B%B4%E6%96%B0/"},{"name":"技術提升","slug":"技術提升","permalink":"https://blog.bakalu.site/categories/%E6%8A%80%E8%A1%93%E6%8F%90%E5%8D%87/"},{"name":"教程","slug":"教程","permalink":"https://blog.bakalu.site/categories/%E6%95%99%E7%A8%8B/"}],"tags":[{"name":"唬爛","slug":"唬爛","permalink":"https://blog.bakalu.site/tags/%E5%94%AC%E7%88%9B/"},{"name":"計劃","slug":"計劃","permalink":"https://blog.bakalu.site/tags/%E8%A8%88%E5%8A%83/"},{"name":"落落格下一年要做什麼","slug":"落落格下一年要做什麼","permalink":"https://blog.bakalu.site/tags/%E8%90%BD%E8%90%BD%E6%A0%BC%E4%B8%8B%E4%B8%80%E5%B9%B4%E8%A6%81%E5%81%9A%E4%BB%80%E9%BA%BC/"},{"name":"年終總結","slug":"年終總結","permalink":"https://blog.bakalu.site/tags/%E5%B9%B4%E7%B5%82%E7%B8%BD%E7%B5%90/"},{"name":"日常","slug":"日常","permalink":"https://blog.bakalu.site/tags/%E6%97%A5%E5%B8%B8/"},{"name":"GoLang","slug":"GoLang","permalink":"https://blog.bakalu.site/tags/GoLang/"},{"name":"教學","slug":"教學","permalink":"https://blog.bakalu.site/tags/%E6%95%99%E5%AD%B8/"},{"name":"更新","slug":"更新","permalink":"https://blog.bakalu.site/tags/%E6%9B%B4%E6%96%B0/"},{"name":"水","slug":"水","permalink":"https://blog.bakalu.site/tags/%E6%B0%B4/"},{"name":"新年","slug":"新年","permalink":"https://blog.bakalu.site/tags/%E6%96%B0%E5%B9%B4/"},{"name":"OSU","slug":"OSU","permalink":"https://blog.bakalu.site/tags/OSU/"},{"name":"HowTo","slug":"HowTo","permalink":"https://blog.bakalu.site/tags/HowTo/"},{"name":"規劃","slug":"規劃","permalink":"https://blog.bakalu.site/tags/%E8%A6%8F%E5%8A%83/"},{"name":"RimWorld","slug":"RimWorld","permalink":"https://blog.bakalu.site/tags/RimWorld/"},{"name":"教程","slug":"教程","permalink":"https://blog.bakalu.site/tags/%E6%95%99%E7%A8%8B/"},{"name":"Hexo","slug":"Hexo","permalink":"https://blog.bakalu.site/tags/Hexo/"},{"name":"落落格文章","slug":"落落格文章","permalink":"https://blog.bakalu.site/tags/%E8%90%BD%E8%90%BD%E6%A0%BC%E6%96%87%E7%AB%A0/"}]}